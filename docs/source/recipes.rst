Steps required
==============

A Gaussian output file or a xyz file is required for the initial geometry.

Generate the Gaussian input files
+++++++++++++++++++++++++++++++++

At this point  some information are provided from command line, whereas the options for the Gaussian calculation are stored in a **json** file which is read by the script. An example **json** file can be generated by running:

.. code-block:: bash

    lmmkinp --template

From command line the atom types bonded to the hydrogens to investigate must be provided and the parameters of the numerical evaluation can be tuned.

.. note:: **Default values**
    within squared bracket the values used in the Methylthiirane publication are reported.

    * minpos: -0.33 Å [-0.33]
    * nstep: 13 [55]    
    * stepsize: 0.064 Å [0.016]
   
An example of **json** file is:

.. code-block:: text

    {"qmdata": {"mem": 20,
	            "cpu": 12,
	            "functional": "B3PW91",
                "basis": "gen 6D 10F empiricaldispersion=gd3bj",
                "molchr": 0,
                "molspn": 1,
                "addroot": "freq=vcd ",
                "addline": "@/home/m.fuse/basis/SNSD.gbs"}
    }

The keywords defines:
    * **mem**: the memory to be used in GB
    * **functional**: the dft functional or HF
    * **basis**: the basis sets, additional information can be added e.g. to use empirical dispersions
    * **molchr**: the molecular charge
    * **molspn**: the molecular spin
    * **addroot**: any additional keywords, in the example the required freq=vcd key is given here
    * **addline**: any additional string to be added after the geometry e.g. an user defined basis sets

An example of input generation is:

.. code-block:: bash

    lmmkinp gaus.log opts.json C N -w test --prefix="gaus"

in the example above the geometry is taken from *gaus.log*, the options for the inputs from *opts.json*, all the **CH** and **NH** bonds in the molecule are selected and for each of the the inputs are generated. The input are write in the *test* folder (if it does not exist it is created) and at the files is added a prefix *gaus*.

Each file has the following syntax for the name:

`lmodes_bond_HX_Y_Z_step00A.gjf`

where **X** is the second atom type, **Y** and **Z** are the atom indices and **A** the step number starting from 0. The equilibrium geometry is always written (A bit of redundancy to be improved).

Running the jobs
++++++++++++++++

Once generated the inputs, jobs can run everywhere. **N.B** the following step requires fchk.

Two helper script in bash are provided in the utilities folder.
    * **runlmodes.sh**: is designed to run on a local nodes. it takes two arguments: the prefix of the inputs ("gaus" in the previous example) and the number of jobs to run in parallel.
    * **sub-cineca.sh**: is a submission script designed for slurm (e.g. CINECA) to be copied in the submission directory. Within the script the **pjob** variable set the number of jobs to run in parallel.

.. note:: 
    GAUSS_EXEDIR must be in the PATH

.. danger::
    The scripts don't check the number of available processors!! The number of processors per job and the total amount must be checked by the user!!

Both the script after the jobs are done format the chk in fchk and trim them in order to reduce the disk usage.

Extracting the local mode results
+++++++++++++++++++++++++++++++++

This is a helper script designed to extract the data from gaussian fchk files.
four positional arguments are required:

    * **fname**: It requires the log or xyz file with the equilibrium geometry (once agin redundant to be fixed) 
    * **folder**: where look for the fchk files
    * **prefix**: prefix of the fchk files
    * **xatoms**: atom types bonded to H to check

An example of fchk reading based on the previous example is:

.. code-block:: bash

    lmprcdt gaus.log test gaus C N -w test --fout="res"

the script writes two txt file in the folder where the script is running with the prefix specified by `--fout`
In the current example:

    * **res_omegachi.dat** containing the ω and χ values in cm-1 for each XH bonds and specified by atom indices and types.

.. code-block:: text

    #     Bond       Omega     Chi
    4   H  3   N   3552.53    73.12
    5   H  3   N   3513.62    74.34
    13  H  12  O   3694.89    94.77

and

    * **res_trns.dat** containing the frequencies and the dipole strength and rotational strength in cgs for each XH bonds upt to the number of quanta selected.

.. code-block:: text

     # Qnt       Bond       Freq.       DS          RS     
       1    4   H  3   N   3406.29  4.6488E-40 -1.3926E-44
       1    5   H  3   N   3364.93  1.2711E-40  8.1314E-45
       1    13  H  12  O   3505.36  1.5811E-38  1.8626E-45
       2    4   H  3   N   6666.33  1.7097E-40 -1.3919E-45
       2    5   H  3   N   6581.18  1.1562E-40  1.8555E-45
       2    13  H  12  O   6821.18  1.8223E-40 -8.4125E-46
       3    4   H  3   N   9780.14  5.2729E-42 -1.0906E-46
       3    5   H  3   N   9648.75  5.1185E-42  1.5509E-46
       3    13  H  12  O   9947.46  7.8880E-42 -3.4002E-46
   
The  number of quanta and the maximum coefficient in the taylor expansion of the transition dipoles can be tuned with the **--quanta** and **--nterms** keywords from the command line.
